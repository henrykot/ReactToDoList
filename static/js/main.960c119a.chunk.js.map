{"version":3,"sources":["components/ToDoList.js","components/InputForm.js","App.js","index.js"],"names":["ToDoList","toDoItems","editItem","removeItem","filterItem","filter","className","map","toDoItem","title","type","onClick","id","InputForm","setToDo","toDo","setToDoItems","editing","setEditing","currentId","setCurrentId","setFilter","refContainer","placeholder","value","onChange","e","target","ref","preventDefault","item","newToDo","Date","getTime","toString","console","log","name","App","useState","useRef","useEffect","current","focus","specificItem","find","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+NAoDeA,EAlDE,SAAC,GAA6D,IAA3DC,EAA0D,EAA1DA,UAAWC,EAA+C,EAA/CA,SAAUC,EAAqC,EAArCA,WAAYC,EAAyB,EAAzBA,WAAYC,EAAa,EAAbA,OAC/D,OACE,qCACE,sCAGA,qBAAKC,UAAU,eAAf,SACE,oBAAIA,UAAU,YAAd,SACGL,EAAUM,KAAI,SAACC,GACd,GAAIH,IAAWG,EAASH,QAAqB,QAAXA,EAChC,OACE,qBAAKC,UAAU,OAAf,SACE,qBAEEA,UAAS,oBACa,cAApBE,EAASH,QAA0B,YAHvC,UAMGG,EAASC,MACV,wBACEC,KAAK,SACLC,QAAS,kBAAMP,EAAWI,EAASI,KACnCN,UAAU,kBAHZ,sBAOA,wBACEI,KAAK,SACLC,QAAS,kBAAMT,EAASM,EAASI,KACjCN,UAAU,cAHZ,kBAOA,wBACEK,QAAS,kBAAMR,EAAWK,EAASI,KACnCN,UAAU,gBAFZ,sBApBKE,EAASI,iB,OCsEnBC,EAnFG,SAAC,GAWZ,IAVLC,EAUI,EAVJA,QACAC,EASI,EATJA,KACAC,EAQI,EARJA,aACAf,EAOI,EAPJA,UACAgB,EAMI,EANJA,QACAC,EAKI,EALJA,WACAC,EAII,EAJJA,UACAC,EAGI,EAHJA,aACAC,EAEI,EAFJA,UACAC,EACI,EADJA,aA8CA,OACE,iCACE,uBACEZ,KAAK,OACLa,YAAY,cACZC,MAAOT,EACPU,SAjDe,SAACC,GACpBZ,EAAQY,EAAEC,OAAOH,QAiDbI,IAAKN,IAEP,wBAAQZ,KAAK,SAASc,MAAM,SAASb,QA5CpB,SAACe,GAGpB,GAFAA,EAAEG,iBAEGd,EAEE,GAAIA,GAAQE,EACjBD,EACEf,EAAUM,KAAI,SAACuB,GACb,OAAIA,EAAKlB,KAAOO,EACP,2BACFW,GADL,IAEErB,MAAOM,IAGJe,MAGXhB,EAAQ,IACRI,GAAW,GACXE,EAAa,UACR,CACL,IAAMW,EAAU,CACdnB,IAAI,IAAIoB,MAAOC,UAAUC,WACzBzB,MAAOM,EACPV,OAAQ,iBAEVW,EAAa,GAAD,mBAAKf,GAAL,CAAgB8B,KAC5BjB,EAAQ,SAvBRqB,QAAQC,IAAI,UAwCZ,oBAGA,qBAAK9B,UAAU,SAAf,SACE,yBACEmB,SAjBa,SAACC,GACpBL,EAAUK,EAAEC,OAAOH,QAiBba,KAAK,YACL/B,UAAU,eAHZ,UAKE,wBAAQkB,MAAM,MAAd,mBACA,wBAAQA,MAAM,YAAd,yBACA,wBAAQA,MAAM,gBAAd,sC,MCKKc,MA9Ef,WAEE,MAAkCC,mBAAS,IAA3C,mBAAOtC,EAAP,KAAkBe,EAAlB,KACA,EAAwBuB,mBAAS,IAAjC,mBAAOxB,EAAP,KAAaD,EAAb,KACA,EAA8ByB,oBAAS,GAAvC,mBAAOtB,EAAP,KAAgBC,EAAhB,KACA,EAAkCqB,mBAAS,MAA3C,mBAAOpB,EAAP,KAAkBC,EAAlB,KACA,EAA4BmB,mBAAS,OAArC,mBAAOlC,EAAP,KAAegB,EAAf,KAEMC,EAAekB,iBAAO,MAuC5B,OAHAC,qBAAU,WACRnB,EAAaoB,QAAQC,WAGrB,qCACE,iCACE,8CAGF,cAAC,EAAD,CACE7B,QAASA,EACTC,KAAMA,EACNC,aAAcA,EACdf,UAAWA,EACXiB,WAAYA,EACZD,QAASA,EACTE,UAAWA,EACXC,aAAcA,EACdC,UAAWA,EACXC,aAAcA,IAIhB,cAAC,EAAD,CACErB,UAAWA,EACXC,SArDW,SAACU,GAChB,IAAMgC,EAAe3C,EAAU4C,MAAK,SAACf,GAAD,OAAUA,EAAKlB,KAAOA,KAC1DM,GAAW,GACXE,EAAaR,GACbE,EAAQ8B,EAAanC,QAkDjBN,WAhDa,SAACS,GAClBI,EAAaf,EAAUI,QAAO,SAACyB,GAAD,OAAUA,EAAKlB,KAAOA,OAgDhDR,WA9Ca,SAACQ,GAClBI,EACEf,EAAUM,KAAI,SAACuB,GACb,OAAIA,EAAKlB,KAAOA,EACM,kBAAhBkB,EAAKzB,OACA,2BACFyB,GADL,IAEEzB,OAAQ,cAGL,2BACFyB,GADL,IAEEzB,OAAQ,kBAGLyB,OAgCPzB,OAAQA,QCxEhByC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.960c119a.chunk.js","sourcesContent":["import React from \"react\";\n\nconst ToDoList = ({ toDoItems, editItem, removeItem, filterItem, filter }) => {\n  return (\n    <>\n      <h1>List</h1>\n\n      {/* going through the list and displaying each item with description, and 2 buttons*/}\n      <div className=\"todo-divison\">\n        <ul className=\"todo-list\">\n          {toDoItems.map((toDoItem) => {\n            if (filter === toDoItem.filter || filter === \"all\") {\n              return (\n                <div className=\"todo\">\n                  <li\n                    key={toDoItem.id}\n                    className={`todo-item ${\n                      toDoItem.filter === \"completed\" && \"complete\"\n                    }`}\n                  >\n                    {toDoItem.title}\n                    <button\n                      type=\"button\"\n                      onClick={() => filterItem(toDoItem.id)}\n                      className=\"complete-button\"\n                    >\n                      complete\n                    </button>\n                    <button\n                      type=\"button\"\n                      onClick={() => editItem(toDoItem.id)}\n                      className=\"edit-button\"\n                    >\n                      edit\n                    </button>\n                    <button\n                      onClick={() => removeItem(toDoItem.id)}\n                      className=\"remove-button\"\n                    >\n                      remove\n                    </button>\n                  </li>\n                </div>\n              );\n            }\n          })}\n        </ul>\n      </div>\n    </>\n  );\n};\n\nexport default ToDoList;\n","import React from \"react\";\n\nconst InputForm = ({\n  setToDo,\n  toDo,\n  setToDoItems,\n  toDoItems,\n  editing,\n  setEditing,\n  currentId,\n  setCurrentId,\n  setFilter,\n  refContainer,\n}) => {\n  // obtains user input as text\n  const handleChange = (e) => {\n    setToDo(e.target.value);\n  };\n\n  // updates toDoItems list once user presses submit\n  // includees a case for when user tries to submit without entering data\n  // includes a case that deals with the active edit\n  // includes the case for submitting\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (!toDo) {\n      console.log(\"error\");\n    } else if (toDo && editing) {\n      setToDoItems(\n        toDoItems.map((item) => {\n          if (item.id === currentId) {\n            return {\n              ...item,\n              title: toDo,\n            };\n          }\n          return item;\n        })\n      );\n      setToDo(\"\");\n      setEditing(false);\n      setCurrentId(null);\n    } else {\n      const newToDo = {\n        id: new Date().getTime().toString(),\n        title: toDo,\n        filter: \"not-completed\",\n      };\n      setToDoItems([...toDoItems, newToDo]);\n      setToDo(\"\");\n    }\n\n    //const newToDo = {id: new Date().getTime().toString(),title:toDo}\n  };\n  const handleFilter = (e) => {\n    setFilter(e.target.value);\n  };\n  return (\n    <form>\n      <input\n        type=\"text\"\n        placeholder=\"enter value\"\n        value={toDo}\n        onChange={handleChange}\n        ref={refContainer}\n      />\n      <button type=\"submit\" value=\"submit\" onClick={handleSubmit}>\n        submit\n      </button>\n      <div className=\"select\">\n        <select\n          onChange={handleFilter}\n          name=\"toDoItems\"\n          className=\"filter-to-do\"\n        >\n          <option value=\"all\"> all </option>\n          <option value=\"completed\"> completed </option>\n          <option value=\"not-completed\"> not-completed </option>\n        </select>\n      </div>\n    </form>\n  );\n};\n\nexport default InputForm;\n","import React, { useEffect, useState, useRef } from \"react\";\nimport ToDoList from \"./components/ToDoList\";\nimport InputForm from \"./components/InputForm\";\nimport \"./App.css\";\n\nfunction App() {\n  // UseStates\n  const [toDoItems, setToDoItems] = useState([]);\n  const [toDo, setToDo] = useState(\"\");\n  const [editing, setEditing] = useState(false);\n  const [currentId, setCurrentId] = useState(null);\n  const [filter, setFilter] = useState(\"all\");\n  // UseRef\n  const refContainer = useRef(null);\n  // functions\n  //  const removeItem = (id)\n\n  // function that is called inside of the todo List\n  // it takes the id of the todo item as Input\n  // it creates a new item by setting it to the items\n  // in the todoList that has the same id as the one being edited\n  const editItem = (id) => {\n    const specificItem = toDoItems.find((item) => item.id === id);\n    setEditing(true);\n    setCurrentId(id);\n    setToDo(specificItem.title);\n  };\n  const removeItem = (id) => {\n    setToDoItems(toDoItems.filter((item) => item.id !== id));\n  };\n  const filterItem = (id) => {\n    setToDoItems(\n      toDoItems.map((item) => {\n        if (item.id === id) {\n          if (item.filter === \"not-completed\") {\n            return {\n              ...item,\n              filter: \"completed\",\n            };\n          }\n          return {\n            ...item,\n            filter: \"not-completed\",\n          };\n        }\n        return item;\n      })\n    );\n  };\n  useEffect(() => {\n    refContainer.current.focus();\n  });\n  return (\n    <>\n      <header>\n        <h1>To-Do-List</h1>\n      </header>\n      {/* Input from the user that adds a new todo item */}\n      <InputForm\n        setToDo={setToDo}\n        toDo={toDo}\n        setToDoItems={setToDoItems}\n        toDoItems={toDoItems}\n        setEditing={setEditing}\n        editing={editing}\n        currentId={currentId}\n        setCurrentId={setCurrentId}\n        setFilter={setFilter}\n        refContainer={refContainer}\n      />\n\n      {/* todo list that displays all the todo items */}\n      <ToDoList\n        toDoItems={toDoItems}\n        editItem={editItem}\n        removeItem={removeItem}\n        filterItem={filterItem}\n        filter={filter}\n      />\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}